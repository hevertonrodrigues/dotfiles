Pry.config.editor = 'mvim -v'

Pry.config.prompt = proc do |obj, level, _|
  prompt = ''
  prompt << "#{Rails.version}@" if defined?(Rails)
  prompt << "#{RUBY_VERSION}"
  "#{prompt} (#{obj.to_s[0..30]})> "
end

Pry.config.exception_handler = proc do |output, exception, _|
  output.puts "\e[31m#{exception.class}: #{exception.message}"
  output.puts "from #{exception.backtrace.first}\e[0m"
end

if defined?(Rails)
  %w(rails/console/app rails/console/helpers).each { |f| require f }
  TOPLEVEL_BINDING.eval('self').extend ::Rails::ConsoleMethods
end

def fg
  require 'factory_girl'
  FactoryGirl.factories.clear
  load File.join(Rails.root, 'spec/support/factories.rb')
  true
end

begin
  require 'awesome_print'
  Pry.config.print = proc { |output, value| Pry::Helpers::BaseHelpers.stagger_output("=> #{value.ai}", output) }
rescue LoadError => err
  warn "=> Unable to load awesome_print (#{err})"
end






# # Rails 2
# # Launch Pry with access to the entire Rails stack.
# # If you have Pry in your Gemfile, you can pass: ./script/console --irb=pry
# # instead. If you don't, you can load it through the lines below :)
# rails = File.join(Dir.getwd, 'config', 'environment.rb')
#
# if File.exist?(rails) && ENV['SKIP_RAILS'].nil?
#   require rails
#
#   if Rails.version[0..0] == '2'
#     require 'console_app'
#     require 'console_with_helpers'
#   elsif Rails.version[0..0] == '3'
#     require 'rails/console/app'
#     require 'rails/console/helpers'
#   else
#     warn '[WARN] cannot load Rails console commands (Not on Rails 2 or 3?)'
#   end
# end
